module Task6 where
	
	import Todo(todo)
	
	data LinkedTree a = ChangeMe
	
	find :: LinkedTree a -> a -> Bool
	find = todo
	insert :: LinkedTree a -> a -> LinkedTree a
	insert = todo
	remove :: LinkedTree a -> a -> LinkedTree a
	remove = todo


Node next(x : Node):
   if x.right != null
      return minimum(x.right)
   y = x.parent
   while y != null and x == y.right
      x = y
      y = y.parent
   return y

Node prev(x : Node):
   if x.left != null
      return maximum(x.left)
   y = x.parent
   while y != null and x == y.left
      x = y
      y = y.parent
   return y
…………..
func insert(x : Node, z : Node):            // x — корень поддерева, z — вставляемый элемент
   while x != null
     if z.key > x.key
        if x.right != null
           x = x.right
        else
           z.parent = x
           x.right = z
           break
     else if z.key < x.key
        if x.left != null
           x = x.left
        else
           z.parent = x
           x.left = z
           break


 //Реализация удаления
remove :: Ord key => BSTree key value -> key -> BSTree key value remove Leaf _ = Leaf 
remove (Branch key value left right) k 
| k < key = Branch key value (remove left k) right 
| k > key = Branch key value left (remove right k)
 | k == key = if isLeaf right 
               then left
            else Branch leftmostA leftmostB left right' 
          where
               isLeaf Leaf = True 
               isLeaf _ = False 
((leftmostA, leftmostB), right') = deleteLeftmost right deleteLeftmost (Branch key value Leaf right) = ((key, value), right)
 deleteLeftmost (Branch key value left right) = (pair, Branch key value left' right) 
               where (pair, left') = deleteLeftmost left
,,,,,


